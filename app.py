import streamlit as st
import time, hmac, hashlib, requests
import os

# API ‡¶ï‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü Streamlit secrets ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶¨‡ßá (‡¶≤‡¶æ‡¶á‡¶≠‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá‡¶®)
API_KEY = st.secrets.get("DELTA_API_KEY", "your_placeholder_key")
API_SECRET = st.secrets.get("DELTA_API_SECRET", "your_placeholder_secret")
BASE_URL = "https://cdn-ind.testnet.deltaex.org"

def test_api_connection(path):
    query = ""
    url = BASE_URL + path
    timestamp = str(int(time.time()))
    method = "GET"
    body = ""
    signature_payload = method + timestamp + path + query + body
    signature = hmac.new(
        API_SECRET.encode(),
        signature_payload.encode(),
        hashlib.sha256
    ).hexdigest()
    headers = {
        "api-key": API_KEY,
        "timestamp": timestamp,
        "signature": signature,
        "User-Agent": "python-3.12"
    }
    try:
        r = requests.get(url, headers=headers, timeout=30)
        r.raise_for_status()
        return r.json()
    except requests.exceptions.HTTPError as e:
        st.error(f"‚ö†Ô∏è HTTP Error for {path}: {e}")
        if e.response.status_code == 401:
            st.error("   ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ‡¶Ö‡¶ó‡¶§‡ßç‡¶Ø‡¶æ API ‡¶ï‡ßÄ, IP whitelisting, ‡¶¨‡¶æ ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡•§")
        return None
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø for {path}: {str(e)}")
        return None

def pretty_print_positions(data):
    if not data or not data.get("success", False):
        st.error("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶ì‡¶™‡ßá‡¶® ‡¶™‡¶ú‡¶ø‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        return
    positions = data.get("result", [])
    if not positions:
        st.error("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶ì‡¶™‡ßá‡¶® ‡¶™‡¶ú‡¶ø‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        return
    for p in positions:
        symbol = p.get("product", {}).get("symbol") or p.get("product_symbol") or "UNKNOWN"
        size = p.get("size") or "N/A"
        entry_price = p.get("entry_price") or "N/A"
        mark_price = p.get("mark_price") or "N/A"
        unrealized_pnl = p.get("unrealized_pnl") or "0"
        st.write(f"üîπ **Symbol:** {symbol} | **Size:** {size} | **Entry:** {entry_price} | **Mark:** {mark_price} | **P/L:** {unrealized_pnl}")

def print_wallet_balances(data):
    if not data or not data.get("success", False):
        st.error("‚ùå ‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤‡ßá‡¶ü ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
        return
    balances = data.get("result", [])
    if not balances:
        st.info("   ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø (‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡¶®‡ßá‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï)‡•§")
        return
    for bal in balances[:3]:
        asset = bal.get("asset_symbol", "UNKNOWN")
        balance = bal.get("balance", "0")
        st.success(f"   üí∞ **{asset}:** {balance}")

st.title("Delta Exchange API Fetcher")
if st.button("‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®"):
    with st.spinner("‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
        positions_data = test_api_connection("/v2/positions/margined")
        if positions_data:
            st.subheader("‡¶ì‡¶™‡ßá‡¶® ‡¶™‡¶ú‡¶ø‡¶∂‡¶®")
            pretty_print_positions(positions_data)
        balances_data = test_api_connection("/v2/wallet/balances")
        if balances_data:
            st.subheader("‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏")
            print_wallet_balances(balances_data)